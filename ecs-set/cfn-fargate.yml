AWSTemplateFormatVersion: "2010-09-09"
Description: "http service"

Parameters:
  EnvironmentName:
    Type: String
    Description: refs vpc stack
  DockerImage:
    Type: String
    Default: 983627551655.dkr.ecr.ap-northeast-1.amazonaws.com/sample:latest
  ECSTaskCPUUnit:
    AllowedValues: [256, 512, 1024, 2048, 4096]
    Type: String
    Default: 256
  ECSTaskMemory:
    AllowedValues: [512, 1024, 2048, 4096]
    Type: String
    Default: 512
  ECSTaskDesiredCount:
    Type: Number
    Default: 1
  DBMasterUserName:
    Type: String
  DBMasterUserPassword:
    NoEcho: true
    Type: String
  MySQLVersion:
    Default: 5.7.26
    Type: String
  DBInstanceClass:
    Default: db.t2.micro
    Type: String
  RDSStorageSize:
    Default: "20"
    Type: String

Resources:
  ELB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Scheme: internet-facing
      SecurityGroups:
        - {
            "Fn::ImportValue":
              !Join ["-", [!Ref EnvironmentName, DefaultSecurityGroup]],
          }
        - {
            "Fn::ImportValue":
              !Join ["-", [!Ref EnvironmentName, ALBSecurityGroup]],
          }
      Subnets:
        !Split [
          ",",
          {
            "Fn::ImportValue":
              !Join ["-", [!Ref EnvironmentName, "PublicSubnets"]],
          },
        ]

      LoadBalancerAttributes:
        - Key: "idle_timeout.timeout_seconds"
          Value: "60"
      Tags:
        - Key: "cfn-stackname"
          Value: !Ref "AWS::StackName"
  ELBHttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ELB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            ContentType: text/plain
            StatusCode: "403"
            MessageBody: Forbidden
  ELBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Protocol: HTTP
      TargetType: ip
      Port: 80
      VpcId: { "Fn::ImportValue": !Join ["-", [!Ref EnvironmentName, VPC]] }
      HealthCheckProtocol: HTTP
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 15
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 6
      TargetGroupAttributes:
        - Key: "deregistration_delay.timeout_seconds"
          Value: "30"
  ELBDefaultRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref ELBHttpListener
      Priority: 40000
      Conditions:
        - Field: "path-pattern"
          PathPatternConfig:
            Values: ["/*"]
      Actions:
        - Type: forward
          TargetGroupArn: !Ref ELBTargetGroup

  ECSServiceRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "${AWS::StackName}-ecs-servicerole"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ""
            Effect: Allow
            Principal:
              Service: ecs.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: default
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "ec2:AuthorizeSecurityGroupIngress"
                  - "ec2:Describe*"
                  - "elasticloadbalancing:DeregisterInstancesFromLoadBalancer"
                  - "elasticloadbalancing:DeregisterTargets"
                  - "elasticloadbalancing:Describe*"
                  - "elasticloadbalancing:RegisterInstancesWithLoadBalancer"
                  - "elasticloadbalancing:RegisterTargets"
                Resource: "*"
  ECSExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "${AWS::StackName}-ecs-executionrole"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ""
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
  ECSAutoScaleRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "${AWS::StackName}-ecs-autoscale"
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "application-autoscaling.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: application-scaling
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "ecs:DescribeServices"
                  - "ecs:UpdateService"
                  - "cloudwatch:PutMetricAlarm"
                  - "cloudwatch:DescribeAlarms"
                  - "cloudwatch:DeleteAlarms"
                Resource: "*"

  ECSCluster:
    Type: "AWS::ECS::Cluster"
    Properties:
      ClusterName: !Sub "${AWS::StackName}-cluster"
  ECSLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ecs/${AWS::StackName}/ecs"
      RetentionInDays: 30
  ESCTaskRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "${AWS::StackName}-taskrole"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ""
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: default
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: "iam:PassRole"
                Resource: "*"
              - Effect: Allow
                Action: "iam:CreateServiceLinkedRole"
                Resource: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:role/aws-service-role/redshift.amazonaws.com/AWSServiceRoleForRedshift
              - Effect: Allow
                NotAction: "iam:*"
                Resource: "*"
  ECSTaskdef:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      Family: !Sub "${AWS::StackName}-ecs"
      Cpu: !Ref ECSTaskCPUUnit
      Memory: !Ref ECSTaskMemory
      TaskRoleArn: !GetAtt ESCTaskRole.Arn
      ExecutionRoleArn: !GetAtt ECSExecutionRole.Arn
      NetworkMode: awsvpc
      ContainerDefinitions:
        - Name: "ecscontainer"
          Image: !Ref DockerImage
          Essential: true
          PortMappings:
            - ContainerPort: 80
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ECSLogGroup
              awslogs-region: !Sub ${AWS::Region}
              awslogs-stream-prefix: "/ecs"
          HealthCheck:
            Command:
              - "CMD-SHELL"
              - "curl -f http://localhost:80 || exit 1"
            StartPeriod: 10
            Interval: 5
            Timeout: 15
            Retries: 3
          Environment:
            - Name: "SERVICE_NAME"
              Value: !Sub "${AWS::StackName}"
            - Name: "AWS_REGION"
              Value: !Ref "AWS::Region"
  ECSService:
    Type: "AWS::ECS::Service"
    DependsOn:
      - ELBDefaultRule
    Properties:
      TaskDefinition: !Ref ECSTaskdef
      LaunchType: FARGATE
      Cluster: !Ref ECSCluster
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: !Ref ECSTaskDesiredCount
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - {
                "Fn::ImportValue":
                  !Join ["-", [!Ref EnvironmentName, DefaultSecurityGroup]],
              }
            - {
                "Fn::ImportValue":
                  !Join ["-", [!Ref EnvironmentName, InstanceSecurityGroup]],
              }
          Subnets:
            !Split [
              ",",
              {
                "Fn::ImportValue":
                  !Join ["-", [!Ref EnvironmentName, "PrivateSubnets"]],
              },
            ]
      LoadBalancers:
        - ContainerName: "ecscontainer"
          ContainerPort: 80
          TargetGroupArn: !Ref ELBTargetGroup
      PropagateTags: SERVICE

  # RDS
  DBInstance:
    Properties:
      AllocatedStorage: !Ref "RDSStorageSize"
      DBInstanceClass: !Ref "DBInstanceClass"
      DBInstanceIdentifier: !Sub ${EnvironmentName}-rds
      DBName: !Sub ${EnvironmentName}_rds
      DBSubnetGroupName: !Ref "RDSSubnetGroup"
      Engine: mysql
      EngineVersion: !Ref "MySQLVersion"
      MasterUserPassword: !Ref "DBMasterUserPassword"
      MasterUsername: !Ref "DBMasterUserName"
      PubliclyAccessible: false
      VPCSecurityGroups:
        - {
            "Fn::ImportValue":
              !Join ["-", [!Ref EnvironmentName, DefaultSecurityGroup]],
          }
    Type: AWS::RDS::DBInstance
  RDSSubnetGroup:
    Properties:
      DBSubnetGroupDescription: subnet group for rds
      DBSubnetGroupName: !Sub ${EnvironmentName}-rds-subnet-group
      SubnetIds:
        !Split [
          ",",
          {
            "Fn::ImportValue":
              !Join ["-", [!Ref EnvironmentName, "PrivateSubnets"]],
          },
        ]
    Type: AWS::RDS::DBSubnetGroup

Outputs:
  URLofPublish:
    Value:
      Fn::Join:
        - ""
        - - http://
          - !GetAtt ELB.DNSName
          - "/"
  URLofDirect:
    Value:
      Fn::Join:
        - ""
        - - "http://"
          - !GetAtt ELB.DNSName
          - ":80/"
